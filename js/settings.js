// –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ö –î–õ–Ø –ï–ñ–ê–ù –°–ò–°–¢–ï–ú–° - –ë–ï–ó –ó–í–£–ö–û–í
class EzhanSettings {
    constructor() {
        console.log('‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ï–∂–∞–Ω–∞...');
        this.settings = {
            theme: 'dark',
            sound: false, // –ó–í–£–ö–ò –í–´–ö–õ–Æ–ß–ï–ù–´ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
            vibration: true,
            notifications: true
        };
        this.isInitialized = false;
        this.init();
    }

    init() {
        if (this.isInitialized) return;
        
        this.loadSettings();
        this.createSettingsButton();
        this.createSettingsPanel();
        this.applyTheme(this.settings.theme);
        this.setupGlobalEventListeners();
        this.applyNotificationSettings();
        this.isInitialized = true;
        
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ï–∂–∞–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

    // üì• –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö
    loadSettings() {
        const saved = localStorage.getItem('ezhan-settings');
        if (saved) {
            try {
                const parsed = JSON.parse(saved);
                this.settings = { ...this.settings, ...parsed };
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.loadLegacySettings();
    }

    loadLegacySettings() {
        // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        if (localStorage.getItem('game-sound-enabled') !== null) {
            this.settings.sound = localStorage.getItem('game-sound-enabled') === 'true';
        }
        if (localStorage.getItem('game-vibration-enabled') !== null) {
            this.settings.vibration = localStorage.getItem('game-vibration-enabled') === 'true';
        }
        if (localStorage.getItem('game-notifications-enabled') !== null) {
            this.settings.notifications = localStorage.getItem('game-notifications-enabled') === 'true';
        }
    }

    // üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö
    saveSettings() {
        try {
            localStorage.setItem('ezhan-settings', JSON.stringify(this.settings));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            localStorage.setItem('game-sound-enabled', this.settings.sound);
            localStorage.setItem('game-vibration-enabled', this.settings.vibration);
            localStorage.setItem('game-notifications-enabled', this.settings.notifications);
            
            console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', this.settings);
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
        }
    }

    // üé® –°–û–ó–î–ê–ù–ò–ï –ö–ù–û–ü–ö–ò –ù–ê–°–¢–†–û–ï–ö
    createSettingsButton() {
        if (document.getElementById('settings-btn')) return;

        const settingsBtn = document.createElement('button');
        settingsBtn.id = 'settings-btn';
        settingsBtn.innerHTML = '‚öôÔ∏è';
        settingsBtn.title = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
        
        Object.assign(settingsBtn.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            width: '50px',
            height: '50px',
            borderRadius: '50%',
            background: 'var(--accent-red)',
            border: 'none',
            color: 'white',
            fontSize: '1.5rem',
            cursor: 'pointer',
            zIndex: '10000',
            boxShadow: '0 4px 15px rgba(255, 51, 51, 0.3)',
            transition: 'all 0.3s ease',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontFamily: 'inherit'
        });

        settingsBtn.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.1) rotate(90deg)';
            this.style.boxShadow = '0 6px 20px rgba(255, 51, 51, 0.5)';
        });

        settingsBtn.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1) rotate(0deg)';
            this.style.boxShadow = '0 4px 15px rgba(255, 51, 51, 0.3)';
        });

        settingsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleSettingsPanel();
            this.vibrate(30);
        });

        document.body.appendChild(settingsBtn);
    }

    // üéõÔ∏è –°–û–ó–î–ê–ù–ò–ï –ü–ê–ù–ï–õ–ò –ù–ê–°–¢–†–û–ï–ö
    createSettingsPanel() {
        if (document.getElementById('settings-panel')) return;

        const panel = document.createElement('div');
        panel.id = 'settings-panel';
        panel.className = 'settings-panel';
        
        panel.innerHTML = `
            <div class="settings-header">
                <h3>‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –î–ï–ì–ï–ù–ï–†–ê–¶–ò–ò</h3>
                <button class="settings-close" id="settings-close-btn">
                    <span>&times;</span>
                </button>
            </div>
            
            <div class="settings-content">
                <!-- –¢–µ–º–∞ -->
                <div class="setting-group">
                    <label class="setting-label">üé® –¢–ï–ú–ê –ï–ñ–ê–ù–ê</label>
                    <div class="theme-buttons">
                        <button class="theme-btn ${this.settings.theme === 'dark' ? 'active' : ''}" 
                                data-theme="dark">
                            üëë –ï–ë–õ–ê–ù
                        </button>
                        <button class="theme-btn ${this.settings.theme === 'light' ? 'active' : ''}" 
                                data-theme="light">
                            üíÄ –î–ï–ì–ï–ù–ï–†–ê–¢
                        </button>
                        <button class="theme-btn ${this.settings.theme === 'auto' ? 'active' : ''}" 
                                data-theme="auto">
                            üé≤ –ê–í–¢–û
                        </button>
                    </div>
                </div>
                
                <div class="settings-divider"></div>
                
                <!-- –ó–≤—É–∫ –£–ë–†–ê–ù -->
                
                <!-- –í–∏–±—Ä–∞—Ü–∏—è -->
                <div class="setting-group">
                    <div class="setting-row">
                        <label for="vibration-toggle" class="setting-label">üì≥ –í–ò–ë–†–ê–¶–ò–Ø –ü–†–û–Å–ë–û–í</label>
                        <label class="switch">
                            <input type="checkbox" id="vibration-toggle" ${this.settings.vibration ? 'checked' : ''}>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="setting-description">–¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ—Ç–¥–∞—á–∞ –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö –≤ –∏–≥—Ä–µ</div>
                </div>
                
                <!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -->
                <div class="setting-group">
                    <div class="setting-row">
                        <label for="notifications-toggle" class="setting-label">üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø</label>
                        <label class="switch">
                            <input type="checkbox" id="notifications-toggle" ${this.settings.notifications ? 'checked' : ''}>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="setting-description">–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ –∫–æ–º–±–æ</div>
                </div>
            </div>
            
            <div class="settings-footer">
                <div class="version-info">–í–ï–†–°–ò–Ø –°–ò–°–¢–ï–ú–´: 2.0</div>
                <div class="status-info">–°–¢–ê–¢–£–°: –î–ï–ì–ï–ù–ï–†–ê–¢</div>
            </div>
        `;

        document.body.appendChild(panel);
        this.setupPanelEventListeners();
        this.applyPanelStyles();
    }

    // üéÆ –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ü–ê–ù–ï–õ–ò
    setupPanelEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ
        document.getElementById('settings-close-btn').addEventListener('click', () => {
            this.hideSettingsPanel();
            this.vibrate(20);
        });

        // –¢–µ–º–∞
        document.querySelectorAll('.theme-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const theme = e.target.dataset.theme;
                this.switchTheme(theme);
                this.vibrate(40);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                document.querySelectorAll('.theme-btn').forEach(b => {
                    b.classList.toggle('active', b.dataset.theme === theme);
                });
            });
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
        const toggles = {
            'vibration-toggle': 'vibration', 
            'notifications-toggle': 'notifications'
        };

        Object.entries(toggles).forEach(([id, setting]) => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('change', (e) => {
                    const isEnabled = e.target.checked;
                    this.settings[setting] = isEnabled;
                    this.saveSettings();
                    this.vibrate(25);
                    this.showSettingNotification(setting, isEnabled);
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–∑—É
                    this.applyNotificationSettings();
                });
            }
        });

        // –ö–ª–∞–≤–∏—à–∞ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isPanelVisible()) {
                this.hideSettingsPanel();
            }
        });
    }

    // üåç –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    setupGlobalEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –ø–∞–Ω–µ–ª–∏
        document.addEventListener('click', (e) => {
            const panel = document.getElementById('settings-panel');
            const btn = document.getElementById('settings-btn');
            
            if (panel && panel.classList.contains('active') && 
                !panel.contains(e.target) && e.target !== btn) {
                this.hideSettingsPanel();
            }
        });
    }

    // üé® –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–ï–ú–´
    switchTheme(theme) {
        this.settings.theme = theme;
        this.saveSettings();
        this.applyTheme(theme);
        
        this.showNotification(`üé® –¢–µ–º–∞: ${this.getThemeName(theme)}`, 'success');
    }

    getThemeName(theme) {
        const names = {
            'dark': '–ï–ë–õ–ê–ù',
            'light': '–î–ï–ì–ï–ù–ï–†–ê–¢', 
            'auto': '–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø'
        };
        return names[theme] || theme;
    }

    // üñºÔ∏è –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –¢–ï–ú–´
    applyTheme(theme) {
        let actualTheme = theme;
        
        if (theme === 'auto') {
            actualTheme = window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
        }
        
        document.documentElement.setAttribute('data-theme', actualTheme);
        localStorage.setItem('ezhan-theme', theme);
    }

    // üì≥ –í–ò–ë–†–ê–¶–ò–Ø
    vibrate(duration = 50) {
        if (!this.settings.vibration || !navigator.vibrate) return;
        
        try {
            navigator.vibrate(duration);
        } catch (e) {
            console.log('üì≥ –í–∏–±—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
    }

    // üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ù–ê–°–¢–†–û–ô–ö–ê–•
    showSettingNotification(setting, enabled) {
        const messages = {
            vibration: `üì≥ –í–∏–±—Ä–∞—Ü–∏—è ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`,
            notifications: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`
        };
        
        this.showNotification(messages[setting] || '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞', 'success');
    }

    showNotification(message, type = 'info') {
        if (this.settings.notifications && window.NotificationManager) {
            NotificationManager.show(message, type);
        } else {
            console.log(`üì¢ ${message}`);
        }
    }

    // üëÅÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ù–ï–õ–¨–Æ
    isPanelVisible() {
        const panel = document.getElementById('settings-panel');
        return panel && panel.classList.contains('active');
    }

    toggleSettingsPanel() {
        this.isPanelVisible() ? this.hideSettingsPanel() : this.showSettingsPanel();
    }

    showSettingsPanel() {
        const panel = document.getElementById('settings-panel');
        if (!panel) return;

        panel.classList.add('active');
        
        setTimeout(() => {
            panel.style.transform = 'translateX(0)';
        }, 10);
    }

    hideSettingsPanel() {
        const panel = document.getElementById('settings-panel');
        if (!panel) return;

        panel.style.transform = 'translateX(100%)';
        
        setTimeout(() => {
            panel.classList.remove('active');
        }, 300);
    }

    // üõ†Ô∏è –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    applyNotificationSettings() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        localStorage.setItem('game-sound-enabled', this.settings.sound);
        localStorage.setItem('game-vibration-enabled', this.settings.vibration);
        localStorage.setItem('game-notifications-enabled', this.settings.notifications);
        
        console.log('‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', {
            sound: this.settings.sound,
            vibration: this.settings.vibration,
            notifications: this.settings.notifications
        });
    }

    // üé® –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –°–¢–ò–õ–ï–ô –ü–ê–ù–ï–õ–ò
    applyPanelStyles() {
        const style = document.createElement('style');
        style.textContent = this.getPanelStyles();
        document.head.appendChild(style);
    }

    getPanelStyles() {
        return `
            .settings-panel {
                position: fixed;
                top: 0;
                right: 0;
                width: 400px;
                height: 100vh;
                background: var(--bg-card);
                border-left: 1px solid var(--border-color);
                z-index: 9999;
                transform: translateX(100%);
                transition: transform 0.3s ease;
                display: none;
                box-shadow: -5px 0 30px rgba(0, 0, 0, 0.3);
                font-family: 'Inter', sans-serif;
            }
            
            .settings-panel.active {
                display: block;
            }
            
            .settings-header {
                padding: 1.5rem;
                border-bottom: 1px solid var(--border-color);
                background: var(--bg-dark);
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .settings-header h3 {
                color: var(--accent-red);
                margin: 0;
                font-size: 1.2rem;
                font-weight: 700;
            }
            
            .settings-close {
                background: none;
                border: none;
                color: var(--text-secondary);
                font-size: 2rem;
                cursor: pointer;
                padding: 0;
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
                border-radius: 50%;
            }
            
            .settings-close:hover {
                color: var(--accent-red);
                background: rgba(255, 51, 51, 0.1);
            }
            
            .settings-content {
                padding: 1.5rem;
                overflow-y: auto;
                height: calc(100vh - 120px);
            }
            
            .setting-group {
                margin-bottom: 2rem;
            }
            
            .setting-label {
                display: block;
                color: var(--text-primary);
                margin-bottom: 1rem;
                font-weight: 600;
            }
            
            .setting-row {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 0.5rem;
            }
            
            .setting-description {
                color: var(--text-secondary);
                font-size: 0.85rem;
                margin-top: 0.3rem;
            }
            
            .theme-buttons {
                display: flex;
                gap: 0.5rem;
            }
            
            .theme-btn {
                flex: 1;
                padding: 0.8rem 1rem;
                background: var(--bg-light);
                border: 1px solid var(--border-color);
                color: var(--text-secondary);
                border-radius: 8px;
                cursor: pointer;
                transition: all 0.3s ease;
                font-size: 0.9rem;
                font-weight: 500;
            }
            
            .theme-btn:hover {
                background: var(--accent-red);
                color: white;
                border-color: var(--accent-red);
            }
            
            .theme-btn.active {
                background: var(--accent-red);
                color: white;
                border-color: var(--accent-red);
                font-weight: 700;
            }
            
            .switch {
                position: relative;
                display: inline-block;
                width: 50px;
                height: 24px;
            }
            
            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }
            
            .slider {
                position: absolute;
                cursor: pointer;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: var(--bg-light);
                transition: .4s;
                border-radius: 24px;
                border: 1px solid var(--border-color);
            }
            
            .slider:before {
                position: absolute;
                content: "";
                height: 16px;
                width: 16px;
                left: 4px;
                bottom: 3px;
                background-color: var(--text-secondary);
                transition: .4s;
                border-radius: 50%;
            }
            
            input:checked + .slider {
                background-color: var(--accent-red);
                border-color: var(--accent-red);
            }
            
            input:checked + .slider:before {
                transform: translateX(26px);
                background-color: white;
            }
            
            .settings-divider {
                height: 1px;
                background: var(--border-color);
                margin: 1.5rem 0;
            }
            
            .settings-footer {
                padding: 1rem 1.5rem;
                border-top: 1px solid var(--border-color);
                background: var(--bg-dark);
                display: flex;
                justify-content: space-between;
                font-size: 0.8rem;
                color: var(--text-muted);
            }
            
            .version-info {
                font-weight: 600;
            }
            
            .status-info {
                color: var(--accent-red);
                font-weight: 700;
            }
            
            @media (max-width: 480px) {
                .settings-panel {
                    width: 100vw;
                }
            }
        `;
    }
}

// üöÄ –ó–ê–ì–†–£–ó–ö–ê –°–ò–°–¢–ï–ú–´ –ù–ê–°–¢–†–û–ï–ö
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        window.ezhanSettings = new EzhanSettings();
    }, 500);
});