// –£–õ–£–ß–®–ï–ù–ò–Ø –î–õ–Ø –ò–ì–†–´ –ï–ñ–ê–ù SIMULATOR - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø
class GameEnhancements {
    constructor() {
        this.comboCount = 0;
        this.comboTimeout = null;
        this.lastClickTime = 0;
        this.isInitialized = false;
        this.shownAchievements = new Set();
        this.processedComboMilestones = new Set();
        
        this.achievementNames = {
            'first-fail': 'üéØ –ü–µ—Ä–≤—ã–π –ø—Ä–æ—ë–±',
            'brain-dead': 'üß† –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑–º–æ–∑–≥–ª—ã–π', 
            'pro-degenerate': 'üëë –ü—Ä–æ –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç',
            'god-mode': '‚ö° –†–µ–∂–∏–º –±–æ–≥–∞',
            'fail-master': 'üíÄ –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—ë–±–æ–≤',
            'thinking-tryhard': 'ü§î –ü—ã—Ç–∞–ª—Å—è –¥—É–º–∞—Ç—å',
            'eternal-failure': '‚ôæÔ∏è –í–µ—á–Ω—ã–π –Ω–µ—É–¥–∞—á–Ω–∏–∫',
            'no-return': 'üö∑ –¢–æ—á–∫–∞ –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞',
            'ultimate-chaos': 'üå™Ô∏è –ê–±—Å–æ–ª—é—Ç–Ω—ã–π —Ö–∞–æ—Å',
            'brain-explosion': 'üí• –í–∑—Ä—ã–≤ –º–æ–∑–≥–∞',
            'fail-god': 'üòà –ë–æ–≥ –ø—Ä–æ–≤–∞–ª–æ–≤',
            'system-breaker': 'üíª –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º'
        };

        this.init();
    }

    init() {
        if (this.isInitialized) return;
        
        this.setupGameImprovements();
        this.addNewFeatures();
        this.isInitialized = true;
        
        console.log('üéÆ –£–ª—É—á—à–µ–Ω–∏—è –∏–≥—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    setupGameImprovements() {
        this.setupSmoothAnimations();
        this.setupEnhancedParticles();
        this.setupGameSounds();
    }

    // üéØ –ü–õ–ê–í–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò
    setupSmoothAnimations() {
        if (typeof EzhanSimulator === 'undefined') {
            setTimeout(() => this.setupSmoothAnimations(), 100);
            return;
        }

        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–∏
        if (EzhanSimulator.prototype.unlockAchievement.__enhanced) {
            return;
        }

        const originalUnlockAchievement = EzhanSimulator.prototype.unlockAchievement;
        const self = this;
        
        EzhanSimulator.prototype.unlockAchievement = function(achievementId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
            if (this.gameState.achievements && this.gameState.achievements.includes(achievementId)) {
                return;
            }
            
            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            if (originalUnlockAchievement) {
                originalUnlockAchievement.call(this, achievementId);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.showAchievementNotification(achievementId);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
            self.showAchievementEffect(achievementId);
        };
        
        EzhanSimulator.prototype.unlockAchievement.__enhanced = true;
    }

    // ‚ú® –£–õ–£–ß–®–ï–ù–ù–´–ï –ß–ê–°–¢–ò–¶–´
    setupEnhancedParticles() {
        const originalCreateParticles = window.createParticles;
        
        window.createParticles = function(x, y, count, type = 'default') {
            const gameColors = {
                fail: ['#ff4444', '#ff6666', '#ff8888', '#ff3333'],
                think: ['#4444ff', '#6666ff', '#8888ff', '#3366ff'],
                blame: ['#ff44ff', '#ff66ff', '#ff88ff', '#ff33ff'],
                repeat: ['#ffff44', '#ffff66', '#ffff88', '#ffff33'],
                achievement: ['#ffd700', '#ffff00', '#ffed4e', '#ffdf00'],
                combo: ['#ff3333', '#ff6b35', '#ff9933', '#ffcc33', '#ffffff']
            };

            const colors = gameColors[type] || gameColors.fail;
            
            for (let i = 0; i < count; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                
                const angle = Math.random() * Math.PI * 2;
                const distance = 60 + Math.random() * 50;
                const tx = Math.cos(angle) * distance;
                const ty = Math.sin(angle) * distance;
                
                const size = Math.random() * 4 + 2;
                const color = colors[Math.floor(Math.random() * colors.length)];
                const delay = Math.random() * 0.2;
                const duration = 0.8 + Math.random() * 0.6;
                
                Object.assign(particle.style, {
                    '--tx': tx + 'px',
                    '--ty': ty + 'px',
                    left: x + 'px',
                    top: y + 'px',
                    background: color,
                    width: `${size}px`,
                    height: `${size}px`,
                    borderRadius: '50%',
                    animationDelay: `${delay}s`,
                    animationDuration: `${duration}s`,
                    boxShadow: `0 0 ${size * 1.5}px ${color}`
                });
                
                document.body.appendChild(particle);
                
                setTimeout(() => {
                    if (particle.parentNode) {
                        particle.remove();
                    }
                }, (duration + delay) * 1000);
            }
        };
    }

// üîä –ó–í–£–ö–ò –ò –í–ò–ë–†–ê–¶–ò–Ø
setupGameSounds() {
    this.sounds = {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∑–≤—É–∫–∏, —É–±–∏—Ä–∞–µ–º –∑–≤—É–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        achievement: this.createSound(1200, 0.3),
        levelup: this.createSound(1000, 0.4)
    };

    this.setupVibration();
}

setupVibration() {
    document.addEventListener('click', (e) => {
        if (e.target.closest('.action-btn')) {
            this.vibrate();
        }
    });
}

// üì≥ –í–ò–ë–†–ê–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–û–ö
vibrate() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∏–±—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!navigator.vibrate || localStorage.getItem('game-vibration-enabled') === 'false') {
        return;
    }
    
    try {
        // –õ–µ–≥–∫–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è (50ms)
        navigator.vibrate(50);
    } catch (e) {
        console.log('üì≥ –í–∏–±—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }
}

createSound(frequency, duration) {
    return function() {
        try {
            if (localStorage.getItem('game-sound-enabled') === 'false') return;
            
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = frequency;
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + duration);
        } catch (e) {
            console.log('üîá Web Audio API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
    };
}

// –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π setupSoundButtons, —Ç–∞–∫ –∫–∞–∫ –∑–≤—É–∫–∏ –∫–Ω–æ–ø–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã

    createSound(frequency, duration) {
        return function() {
            try {
                if (localStorage.getItem('game-sound-enabled') === 'false') return;
                
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.value = frequency;
                oscillator.type = 'sine';
                
                gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + duration);
            } catch (e) {
                console.log('üîá Web Audio API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            }
        };
    }

    setupSoundButtons() {
        document.addEventListener('click', (e) => {
            if (e.target.closest('.action-btn')) {
                const actionType = e.target.closest('.action-btn').dataset.type;
                if (this.sounds[actionType]) {
                    this.sounds[actionType]();
                }
            }
        });
    }

    // üéÆ –ù–û–í–´–ï –§–ò–ß–ò
    addNewFeatures() {
        this.addComboSystem();
        this.addAchievementNotifications();
    }

    // ‚ö° –°–ò–°–¢–ï–ú–ê –ö–û–ú–ë–û –° –§–ï–ô–ï–†–í–ï–†–ö–ê–ú–ò
    addComboSystem() {
        const self = this;
        
        document.addEventListener('click', (e) => {
            if (e.target.closest('.action-btn')) {
                const currentTime = Date.now();
                
                if (currentTime - self.lastClickTime < 100) return;
                self.lastClickTime = currentTime;
                
                self.comboCount++;
                self.showCombo(self.comboCount);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º milestones –∫–æ–º–±–æ (10, 20, 30...)
                self.checkComboMilestones(self.comboCount);
                
                clearTimeout(self.comboTimeout);
                self.comboTimeout = setTimeout(() => {
                    if (self.comboCount >= 3) {
                        self.awardComboBonus(self.comboCount);
                    }
                    self.comboCount = 0;
                    self.processedComboMilestones.clear(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º milestones
                }, 2000);
            }
        });
    }

    // üéá –ü–†–û–í–ï–†–ö–ê MILESTONES –ö–û–ú–ë–û (10, 20, 30...)
    checkComboMilestones(combo) {
        const milestones = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
        
        milestones.forEach(milestone => {
            if (combo === milestone && !this.processedComboMilestones.has(milestone)) {
                this.processedComboMilestones.add(milestone);
                this.createFireworks(milestone);
                
                if (window.NotificationManager) {
                    NotificationManager.show(`üéá COMBO ${milestone}! –§–ï–ô–ï–†–í–ï–†–ö!`, 'success');
                }
            }
        });
    }

    // üéÜ –°–û–ó–î–ê–ù–ò–ï –§–ï–ô–ï–†–í–ï–†–ö–û–í
    createFireworks(milestone) {
        const colors = [
            '#ff3333', '#ff6b35', '#ff9933', '#ffcc33', 
            '#33ff33', '#3366ff', '#ff33ff', '#ffff33'
        ];
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —ç–∫—Ä–∞–Ω–∞
        for (let i = 0; i < 5; i++) {
            setTimeout(() => {
                const x = 100 + Math.random() * (window.innerWidth - 200);
                const y = 100 + Math.random() * (window.innerHeight - 200);
                
                // –ë–æ–ª—å—à–æ–π –≤–∑—Ä—ã–≤ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞
                if (window.createParticles) {
                    window.createParticles(x, y, 50, 'combo');
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö milestones
                if (milestone >= 50) {
                    this.createSpecialFirework(x, y, milestone);
                }
                
            }, i * 300);
        }
        
        // –û—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–æ–º–±–æ 100
        if (milestone === 100) {
            this.createUltimateFirework();
        }
    }

    createSpecialFirework(x, y, milestone) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –∫–æ–º–±–æ
        const specialColors = milestone >= 80 ? 
            ['#ff0000', '#ffff00', '#00ff00', '#00ffff', '#ff00ff'] :
            ['#ff3333', '#ff9933', '#ffff33', '#33ff33'];
            
        for (let i = 0; i < 3; i++) {
            setTimeout(() => {
                if (window.createParticles) {
                    window.createParticles(x, y, 30, 'combo');
                }
            }, i * 200);
        }
    }

    createUltimateFirework() {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫ –¥–ª—è –∫–æ–º–±–æ 100
        console.log('üéÜ ULTIMATE FIREWORK FOR COMBO 100!');
        
        // –§–µ–π–µ—Ä–≤–µ—Ä–∫–∏ –ø–æ —É–≥–ª–∞–º —ç–∫—Ä–∞–Ω–∞
        const corners = [
            {x: 100, y: 100},
            {x: window.innerWidth - 100, y: 100},
            {x: 100, y: window.innerHeight - 100},
            {x: window.innerWidth - 100, y: window.innerHeight - 100}
        ];
        
        corners.forEach((corner, index) => {
            setTimeout(() => {
                if (window.createParticles) {
                    window.createParticles(corner.x, corner.y, 40, 'combo');
                }
            }, index * 400);
        });
        
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–≥–∞-—Ñ–µ–π–µ—Ä–≤–µ—Ä–∫
        setTimeout(() => {
            const centerX = window.innerWidth / 2;
            const centerY = window.innerHeight / 2;
            
            if (window.createParticles) {
                window.createParticles(centerX, centerY, 100, 'combo');
            }
        }, 1000);
    }

    showCombo(count) {
        if (count >= 2) {
            const maxCombo = 100;
            const displayCount = Math.min(count, maxCombo);
            
            const scale = 1 + (displayCount * 0.01);
            const fontSize = 1.8 + (displayCount * 0.03);
            
            const oldCombos = document.querySelectorAll('.combo-popup');
            oldCombos.forEach(combo => combo.remove());
            
            const comboElement = document.createElement('div');
            comboElement.className = 'combo-popup';
            comboElement.textContent = `COMBO x${displayCount}${count > maxCombo ? '+' : ''}!`;
            comboElement.style.cssText = `
                position: fixed;
                top: 45%;
                left: 50%;
                transform: translate(-50%, -50%) scale(${scale});
                font-size: ${fontSize}rem;
                font-weight: 900;
                color: var(--accent-red);
                z-index: 10000;
                text-shadow: 0 0 20px rgba(255, 51, 51, 0.8);
                opacity: 0;
                animation: smoothComboPop 0.9s ease-out forwards;
                pointer-events: none;
                font-family: 'Inter', sans-serif;
            `;
            
            document.body.appendChild(comboElement);
            
            setTimeout(() => {
                comboElement.style.animation = 'smoothComboExit 0.4s ease-out forwards';
                setTimeout(() => {
                    if (comboElement.parentNode) {
                        comboElement.remove();
                    }
                }, 400);
            }, 600);
        }
    }

    awardComboBonus(combo) {
        const bonus = Math.min(combo * 5, 200);
        if (window.ezhanGame) {
            window.ezhanGame.gameState.degeneration += bonus;
            window.ezhanGame.updateUI();
            
            if (window.NotificationManager) {
                NotificationManager.show(`üéØ COMBO BONUS! +${bonus} –¥–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`, 'success');
            }
        }
    }

    // üèÜ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –î–û–°–¢–ò–ñ–ï–ù–ò–Ø–• –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
    addAchievementNotifications() {
        if (typeof EzhanSimulator === 'undefined') {
            setTimeout(() => this.addAchievementNotifications(), 100);
            return;
        }

        // –£–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ setupSmoothAnimations
    }

    showAchievementNotification(achievementId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if (this.shownAchievements.has(achievementId)) {
            return;
        }
        
        this.shownAchievements.add(achievementId);
        
        const achievementName = this.achievementNames[achievementId] || '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
        
        if (window.NotificationManager) {
            NotificationManager.show(`üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–ï: ${achievementName}`, 'success');
        } else {
            this.showFallbackNotification(`üèÜ ${achievementName}`);
        }
        
        console.log(`üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievementName}`);
    }

    showFallbackNotification(message) {
        const notification = document.createElement('div');
        notification.className = 'achievement-notification';
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">üèÜ</span>
                <span class="notification-text">${message}</span>
            </div>
        `;
        
        const existingNotifications = document.querySelectorAll('.achievement-notification');
        const topPosition = 20 + (existingNotifications.length * 90);
        
        notification.style.cssText = `
            position: fixed;
            top: ${topPosition}px;
            right: 20px;
            background: linear-gradient(135deg, var(--accent-red), #ff6b35);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 10px;
            z-index: 10000;
            box-shadow: 0 5px 20px rgba(255, 51, 51, 0.4);
            animation: slideInRight 0.5s ease-out;
            font-weight: 600;
            max-width: 300px;
            min-width: 250px;
        `;
        
        document.body.appendChild(notification);
        this.updateNotificationsPosition();
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease-in forwards';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                    this.updateNotificationsPosition();
                }
            }, 500);
        }, 3000);
    }

    updateNotificationsPosition() {
        const notifications = document.querySelectorAll('.achievement-notification');
        notifications.forEach((notification, index) => {
            const topPosition = 20 + (index * 90);
            notification.style.top = `${topPosition}px`;
        });
    }

    showAchievementEffect(achievementId) {
        if (window.createParticles) {
            const centerX = window.innerWidth / 2;
            const centerY = window.innerHeight / 2;
            window.createParticles(centerX, centerY, 30, 'achievement');
        }
    }
}

// üé® CSS –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ô
const enhancementStyles = `
@keyframes smoothComboPop {
    0% { 
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.5);
    }
    60% { 
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.1);
    }
    100% { 
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
    }
}

@keyframes smoothComboExit {
    0% { 
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
    }
    100% { 
        opacity: 0;
        transform: translate(-50%, -50%) scale(1.2) translateY(-20px);
    }
}

@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes slideOutRight {
    from {
        transform: translateX(0);
        opacity: 1;
    }
    to {
        transform: translateX(100%);
        opacity: 0;
    }
}

.combo-popup {
    pointer-events: none;
}

.achievement-notification {
    font-family: 'Inter', sans-serif;
    transition: top 0.3s ease !important;
}

.notification-content {
    display: flex;
    align-items: center;
    gap: 0.8rem;
}

.notification-icon {
    font-size: 1.5rem;
}

.notification-text {
    flex: 1;
    font-size: 0.9rem;
    font-weight: 600;
}

@media (max-width: 768px) {
    .achievement-notification {
        right: 10px !important;
        left: 10px !important;
        max-width: none !important;
        min-width: auto !important;
    }
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
const styleSheet = document.createElement('style');
styleSheet.textContent = enhancementStyles;
document.head.appendChild(styleSheet);

// üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        new GameEnhancements();
    }, 500);
});

if (typeof EzhanSimulator !== 'undefined') {
    new GameEnhancements();
}